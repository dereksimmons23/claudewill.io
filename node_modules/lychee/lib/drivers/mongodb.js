// Generated by CoffeeScript 1.3.3
var Db, MongoDB, Mongolian;

Db = void 0;

Mongolian = require('mongolian');

MongoDB = (function() {

  function MongoDB(model) {
    var key, _i, _len, _ref;
    this.collection = Db.collection(model.collectionName);
    _ref = model.prototype.keys;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      if (key.index) {
        this.collection.ensureIndex(key.key);
      }
    }
  }

  MongoDB.prototype.find = function(options, callback) {
    var field, fields, notFields, query;
    fields = {};
    notFields = ['limit', 'skip', 'sort'];
    for (field in options) {
      if (options.hasOwnProperty(field) && -1 === notFields.indexOf(field)) {
        fields[field] = options[field];
      }
    }
    if (fields._id) {
      fields = {
        _id: new Mongolian.ObjectId(fields._id)
      };
    }
    query = this.collection.find(fields);
    if (options.sort) {
      query = query.sort(options.sort);
    }
    if (options.limit) {
      query = query.limit(options.limit);
    }
    if (options.skip) {
      query = query.skip(options.skip);
    }
    return query.toArray(function(err, items) {
      var item, _i, _len;
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if (item._id) {
          item._id = item._id.toString();
        }
      }
      return callback(err, items);
    });
  };

  MongoDB.prototype.create = function(fields, callback) {
    return this.collection.insert(fields, function(err, item) {
      if (item) {
        item._id = item._id.toString();
      }
      return callback(err, item);
    });
  };

  MongoDB.prototype.update = function(fields, callback) {
    var _id;
    _id = new Mongolian.ObjectId(fields._id);
    delete fields._id;
    return this.collection.update({
      _id: _id
    }, fields, function(err) {
      return callback(err);
    });
  };

  MongoDB.prototype.remove = function(fields, callback) {
    return this.collection.remove({
      _id: new Mongolian.ObjectId(fields._id)
    }, function(err) {
      return callback(err);
    });
  };

  MongoDB.prototype.removeAll = function(done) {
    return this.collection.drop(function() {
      return done();
    });
  };

  MongoDB.connect = function(hosts, done) {
    Db = new Mongolian(hosts[0], {
      log: {
        debug: function() {},
        info: function() {}
      }
    });
    return done();
  };

  MongoDB.disconnect = function(done) {
    return done();
  };

  MongoDB.Extensions = {};

  return MongoDB;

})();

MongoDB.Extensions.ClassMethods = (function() {

  function ClassMethods() {}

  ClassMethods.prototype.collection = function(collectionName) {
    this.collectionName = collectionName;
  };

  return ClassMethods;

})();

module.exports = MongoDB;
