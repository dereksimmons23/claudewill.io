// Generated by CoffeeScript 1.3.3
var REST, request;

request = require('request');

REST = (function() {

  function REST(model) {
    var _this = this;
    this.url = model.prototype.url;
    if (model.prototype.parse instanceof Function) {
      this.parse = model.prototype.parse;
    }
    this.headers = this.fields = this.qs = {};
    if (model.prototype.request) {
      if (model.prototype.request.headers) {
        this.headers = model.prototype.request.headers;
      }
      if (model.prototype.request.fields) {
        this.fields = model.prototype.request.fields;
      }
      if (model.prototype.request.qs) {
        this.qs = model.prototype.request.qs;
      }
    }
    this.keys = [];
    this.primaryKey = 'id';
    Object.keys(model.prototype.keys).forEach(function(key) {
      _this.keys.push(key);
      if (model.prototype.keys[key].primary) {
        return _this.primaryKey = key;
      }
    });
  }

  REST.prototype.parse = function(response) {
    return JSON.parse(response);
  };

  REST.prototype.find = function(options, done) {
    var _this = this;
    if (options[this.primaryKey]) {
      return this.findByPrimaryKey(options[this.primaryKey], done);
    }
    return request({
      url: "" + this.url + "/",
      method: 'GET',
      headers: this.headers,
      qs: this.qs
    }, function(err, res, body) {
      var response;
      response = _this.parse(body);
      if (done) {
        return done(err, response);
      }
    });
  };

  REST.prototype.findByPrimaryKey = function(value, done) {
    var _this = this;
    return request({
      url: "" + this.url + "/" + value,
      method: 'GET',
      headers: this.headers,
      qs: this.qs
    }, function(err, res, body) {
      var response;
      response = [_this.parse(body)];
      if (done) {
        return done(err, response);
      }
    });
  };

  REST.prototype.create = function(fields, done) {
    var field,
      _this = this;
    for (field in this.fields) {
      if (this.fields.hasOwnProperty(field)) {
        fields[field] = this.fields[field];
      }
    }
    return request({
      url: "" + this.url + "/",
      method: 'POST',
      headers: this.headers,
      form: fields,
      qs: this.qs
    }, function(err, res, body) {
      var response;
      response = _this.parse(body);
      if (done) {
        return done(err, response);
      }
    });
  };

  REST.prototype.update = function(fields, done) {
    var field,
      _this = this;
    for (field in this.fields) {
      if (this.fields.hasOwnProperty(field)) {
        fields[field] = this.fields[field];
      }
    }
    return request({
      url: "" + this.url + "/" + fields[this.primaryKey],
      method: 'PUT',
      headers: this.headers,
      form: fields,
      qs: this.qs
    }, function(err, res, body) {
      var response;
      response = _this.parse(body);
      if (done) {
        return done(err, response);
      }
    });
  };

  REST.prototype.remove = function(fields, done) {
    var _this = this;
    return request({
      url: "" + this.url + "/" + fields[this.primaryKey],
      method: 'DELETE',
      headers: this.headers,
      qs: this.qs
    }, function(err, res, body) {
      if (done) {
        return done(err);
      }
    });
  };

  REST.prototype.removeAll = function(done) {
    var _this = this;
    return request({
      url: "" + this.url + "/",
      method: 'DELETE',
      headers: this.headers,
      qs: this.qs
    }, function(err, res, body) {
      if (done) {
        return done(err);
      }
    });
  };

  REST.connect = function(hosts, done) {
    if (done) {
      return done();
    }
  };

  REST.disconnect = function(done) {
    if (done) {
      return done();
    }
  };

  REST.Extensions = {};

  return REST;

})();

REST.Extensions.ClassMethods = (function() {

  function ClassMethods() {}

  ClassMethods.prototype.init = function() {
    if (this.request) {
      return;
    }
    return this.request = this.prototype.request = {
      headers: {},
      qs: {},
      fields: {}
    };
  };

  ClassMethods.prototype.url = function(url) {
    this.url = url;
    return this.prototype.url = this.url;
  };

  ClassMethods.prototype.header = function(name, value) {
    this.init();
    return this.prototype.request.headers[name] = this.request.headers[name] = value;
  };

  ClassMethods.prototype.headers = function(headers) {
    var name, _results;
    this.init();
    _results = [];
    for (name in headers) {
      if (headers.hasOwnProperty(name)) {
        _results.push(this.header(name, headers[name]));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  ClassMethods.prototype.qs = function(qs) {
    var key, _results;
    this.init();
    if (arguments.length === 2 && qs instanceof String) {
      qs = {
        qs: arguments[1]
      };
    }
    _results = [];
    for (key in qs) {
      if (qs.hasOwnProperty(key)) {
        _results.push(this.request.qs[key] = qs[key]);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  ClassMethods.prototype.defaultField = function(name, value) {
    this.init();
    return this.request.fields[name] = value;
  };

  ClassMethods.prototype.defaultFields = function(fields) {
    var name, _results;
    this.init();
    _results = [];
    for (name in fields) {
      if (fields.hasOwnProperty(name)) {
        _results.push(this.defaultField(name, fields[name]));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return ClassMethods;

})();

module.exports = REST;
