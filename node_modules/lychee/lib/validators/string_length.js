// Generated by CoffeeScript 1.3.3
var StringLengthValidator;

module.exports = StringLengthValidator = (function() {

  StringLengthValidator.detectBy = ['length'];

  function StringLengthValidator(params) {
    this.params = params;
  }

  StringLengthValidator.prototype.validate = function(value, valid) {
    var max, maxEqual, min, minEqual, result;
    if (!value) {
      if (!this.params.allowBlank) {
        valid(false, 'is not present');
      } else {
        valid(true);
      }
      return;
    }
    min = 0;
    minEqual = false;
    max = Infinity;
    maxEqual = false;
    result = /^>=\s?([0-9]+)$/.exec(this.params.length);
    if (result) {
      min = parseInt(result[1]);
      minEqual = true;
    }
    result = /^>\s?([0-9]+)$/.exec(this.params.length);
    if (result) {
      min = parseInt(result[1]);
      minEqual = false;
    }
    result = /^<=\s?([0-9]+)$/.exec(this.params.length);
    if (result) {
      max = parseInt(result[1]);
      maxEqual = true;
    }
    result = /^<\s?([0-9]+)$/.exec(this.params.length);
    if (result) {
      max = parseInt(result[1]);
      maxEqual = false;
    }
    result = /^\=\s?([0-9]+)$/.exec(this.params.length);
    if (result) {
      min = max = parseInt(result[1]);
      minEqual = maxEqual = true;
    }
    if (minEqual) {
      if (!(value.length >= min)) {
        return valid(false, 'is too short');
      }
    } else {
      if (!(value.length > min)) {
        return valid(false, 'is too short');
      }
    }
    if (maxEqual) {
      if (!(value.length <= max)) {
        return valid(false, 'is too long');
      }
    } else {
      if (!(value.length < max)) {
        return valid(false, 'is too long');
      }
    }
    return valid(true);
  };

  return StringLengthValidator;

})();
