// Generated by CoffeeScript 1.3.3
var NumberValueValidator;

module.exports = NumberValueValidator = (function() {

  NumberValueValidator.detectBy = ['value'];

  function NumberValueValidator(params) {
    this.params = params;
  }

  NumberValueValidator.prototype.validate = function(value, valid) {
    var max, maxEqual, min, minEqual, result;
    if (!value) {
      return valid(false, 'is not present');
    }
    min = -Infinity;
    minEqual = false;
    max = Infinity;
    maxEqual = false;
    result = />=\s?([0-9.]+)/.exec(this.params.value);
    if (result) {
      min = parseFloat(result[1]);
      minEqual = true;
    }
    result = />\s?([0-9.]+)/.exec(this.params.value);
    if (result) {
      min = parseFloat(result[1]);
      minEqual = false;
    }
    result = /<=\s?([0-9.]+)/.exec(this.params.value);
    if (result) {
      max = parseFloat(result[1]);
      maxEqual = true;
    }
    result = /<\s?([0-9.]+)/.exec(this.params.value);
    if (result) {
      max = parseFloat(result[1]);
      maxEqual = false;
    }
    result = /^\=\s?([0-9.]+)$/.exec(this.params.value);
    if (result) {
      min = max = parseFloat(result[1]);
      minEqual = maxEqual = true;
    }
    if (min !== -Infinity) {
      if (minEqual) {
        if (!(value >= min)) {
          return valid(false, 'is too small');
        }
      } else {
        if (!(value > min)) {
          return valid(false, 'is too small');
        }
      }
    }
    if (max !== Infinity) {
      if (maxEqual) {
        if (!(value <= max)) {
          return valid(false, 'is too big');
        }
      } else {
        if (!(value < max)) {
          return valid(false, 'is too big');
        }
      }
    }
    return valid(true);
  };

  return NumberValueValidator;

})();
