// Generated by CoffeeScript 1.3.3
var eqlArray;

Array.prototype.merge = function(arr) {
  if (!arr instanceof Array) {
    return false;
  }
};

Array.prototype.eql = function(arr) {
  if (!arr instanceof Array) {
    return false;
  }
  return eqlArray(this, arr);
};

eqlArray = function(src, dest) {
  var i, length;
  if (!src instanceof Array || !dest instanceof Array) {
    return false;
  }
  length = src.length;
  if (length !== dest.length) {
    return false;
  }
  i = 0;
  while (true) {
    if (i === length) {
      break;
    }
    if (src[i] instanceof Object) {
      if (!src[i].eql(dest[i])) {
        return false;
      }
    } else {
      if (src[i] !== dest[i]) {
        return false;
      }
    }
    i++;
  }
  return true;
};

Array.prototype.collect = function(block) {
  var item, result, _i, _len;
  result = [];
  for (_i = 0, _len = this.length; _i < _len; _i++) {
    item = this[_i];
    result.push(block(item));
  }
  return result;
};

Array.prototype.combination = function(size) {
  var chunk, clone, currentSize, item, result, _i, _j, _len, _len1;
  if (size <= 0 || this.length === 0) {
    return [];
  }
  result = [];
  clone = [];
  for (_i = 0, _len = this.length; _i < _len; _i++) {
    item = this[_i];
    clone.push(item);
  }
  currentSize = 0;
  chunk = [];
  for (_j = 0, _len1 = this.length; _j < _len1; _j++) {
    item = this[_j];
    if (currentSize < size) {
      chunk.push(item);
    } else {
      result.push(chunk);
      chunk = [];
      chunk.push(item);
      currentSize = 0;
    }
    currentSize++;
  }
  if (chunk.length > 0) {
    result.push(chunk);
  }
  return result;
};

Array.prototype.compact = function() {
  var item, result, _i, _len;
  result = [];
  for (_i = 0, _len = this.length; _i < _len; _i++) {
    item = this[_i];
    if (item !== void 0 && item !== null) {
      result.push(item);
    }
  }
  return result;
};

Array.prototype.merge = function(arr) {
  var item, result, _i, _j, _len, _len1;
  result = [];
  for (_i = 0, _len = this.length; _i < _len; _i++) {
    item = this[_i];
    result.push(item);
  }
  for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
    item = arr[_j];
    this.push(item);
    result.push(item);
  }
  return result;
};

Array.prototype.count = function(block) {
  var item, result, _i, _len;
  if (typeof block !== 'function') {
    return this.length;
  }
  result = 0;
  for (_i = 0, _len = this.length; _i < _len; _i++) {
    item = this[_i];
    if (block(item)) {
      result++;
    }
  }
  return result;
};

Array.prototype.remove = function(value) {
  var index, removed;
  if (!value) {
    return;
  }
  removed = void 0;
  while (true) {
    index = this.indexOf(value);
    if (index < 0) {
      return removed;
    }
    this.removeAt(index);
    removed = value;
  }
};

Array.prototype.removeAt = function(index) {
  if (index < 0) {
    return;
  }
  return this.splice(index, 1);
};

Array.prototype.removeIf = function(block) {
  var item, result, _i, _len;
  if (typeof block !== 'function') {
    return;
  }
  result = [];
  for (_i = 0, _len = this.length; _i < _len; _i++) {
    item = this[_i];
    if (!block(item)) {
      result.push(item);
    }
  }
  return result;
};

Array.prototype.drop = function(num) {
  return this.splice(0, num);
};

Array.prototype.dropWhile = function(block) {
  var item, result, _i, _len;
  if (typeof block !== 'function') {
    return;
  }
  result = [];
  for (_i = 0, _len = this.length; _i < _len; _i++) {
    item = this[_i];
    if (!block(item)) {
      result.push(item);
    }
  }
  return result;
};

Array.prototype.eachIndex = function(block) {
  var i, length, _results;
  if (typeof block !== 'function') {
    return;
  }
  i = 0;
  length = this.length;
  _results = [];
  while (true) {
    if (i === length) {
      break;
    }
    block(i);
    _results.push(i++);
  }
  return _results;
};

Array.prototype.flatten = function() {
  var flatten, result;
  result = [];
  flatten = function(arr, target) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      if (item instanceof Array) {
        _results.push(flatten(item, target));
      } else {
        _results.push(target.push(item));
      }
    }
    return _results;
  };
  flatten(this, result);
  return result;
};

Array.prototype.take = function(num) {
  var i, length, result;
  if (num < 1) {
    return;
  }
  result = [];
  i = 0;
  length = this.length;
  while (true) {
    if (i === this.length || i === num) {
      break;
    }
    result.push(this[i]);
    i++;
  }
  return result;
};

Array.prototype.takeWhile = function(block) {
  var item, result, _i, _len;
  if (typeof block !== 'function') {
    return;
  }
  result = [];
  for (_i = 0, _len = this.length; _i < _len; _i++) {
    item = this[_i];
    if (block(item)) {
      result.push(item);
    }
  }
  return result;
};

Array.prototype.transpose = function() {
  var columns, item, rows, _i, _len;
  rows = [];
  columns = [];
  for (_i = 0, _len = this.length; _i < _len; _i++) {
    item = this[_i];
    rows.push(item[0]);
    columns.push(item[1]);
  }
  return [rows, columns];
};

Array.prototype.__defineGetter__('transposed', function() {
  return this.transpose();
});

Array.prototype.__defineGetter__('reversed', function() {
  return this.reverse();
});

Array.prototype.__defineGetter__('compacted', function() {
  return this.compact();
});

Array.prototype.__defineGetter__('flattened', function() {
  return this.flatten();
});

Array.prototype.__defineGetter__('first', function() {
  return this[0];
});

Array.prototype.__defineSetter__('first', function(value) {
  return this[0] = value;
});

Array.prototype.__defineGetter__('last', function() {
  return this[this.length - 1];
});

Array.prototype.__defineSetter__('last', function(value) {
  return this[this.length - 1] = value;
});

Array.prototype.__defineGetter__('size', function() {
  return this.length;
});
