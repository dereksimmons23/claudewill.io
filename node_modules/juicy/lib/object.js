// Generated by CoffeeScript 1.3.3
var eqlObject;

Object.to_json = function(obj) {
  return JSON.stringify(obj);
};

Object.to_xml = function(rootElement, elements) {
  var build, xml;
  build = function(els, parentElement) {
    var el, insertParent, s, _i, _len;
    parentElement || (parentElement = rootElement);
    insertParent = !els;
    els || (els = elements);
    els = els.fields && els.errors && els.old ? els.fields : els;
    s = '';
    if (!Array.isArray(els)) {
      if (insertParent) {
        s += "<" + parentElement + ">";
      }
      for (el in els) {
        if (els.hasOwnProperty(el)) {
          s += "<" + el + ">";
          if (Array.isArray(els[el])) {
            s += build(els[el], el.singularized);
          } else if (els[el] instanceof Object) {
            s += build(els[el]);
          } else {
            s += "" + els[el];
          }
          s += "</" + el + ">";
        }
      }
      if (insertParent) {
        s += "</" + parentElement + ">";
      }
    }
    if (Array.isArray(els)) {
      for (_i = 0, _len = els.length; _i < _len; _i++) {
        el = els[_i];
        if (Array.isArray(el)) {
          if (insertParent) {
            s += "<" + parentElement + ">";
          }
          s += build(el);
          if (insertParent) {
            s += "</" + parentElement + ">";
          }
        } else if (el instanceof Object) {
          if (insertParent) {
            s += "<" + parentElement + ">";
          }
          s += build(el);
          if (insertParent) {
            s += "</" + parentElement + ">";
          }
        } else {
          s += "<" + parentElement + ">";
          s += el;
          s += "</" + parentElement + ">";
        }
      }
    }
    return s;
  };
  xml = '<?xml version="1.0" encoding="utf-8"?>';
  xml += "<" + rootElement.pluralized + ">";
  xml += build();
  xml += "</" + rootElement.pluralized + ">";
  return xml;
};

Object.merge = function(src, dest) {
  var prop;
  for (prop in dest) {
    if (dest.hasOwnProperty(prop)) {
      src[prop] = dest[prop];
    }
  }
  return src;
};

Object.eql = function(src, dest) {
  if (!src instanceof Object || !dest instanceof Object) {
    return false;
  }
  return eqlObject(src, dest);
};

eqlObject = function(src, dest) {
  var length, objLength, prop;
  if (!src instanceof Object || !dest instanceof Object) {
    return false;
  }
  length = 0;
  for (prop in src) {
    if (src.hasOwnProperty(prop)) {
      length++;
    }
  }
  objLength = 0;
  for (prop in dest) {
    if (dest.hasOwnProperty(prop)) {
      objLength++;
    }
  }
  if (length !== objLength) {
    return false;
  }
  for (prop in src) {
    if (src.hasOwnProperty(prop)) {
      if (src[prop] instanceof Object) {
        if (!Object.eql(src[prop], dest[prop])) {
          return false;
        }
      } else {
        if (src[prop] !== dest[prop]) {
          return false;
        }
      }
    }
  }
  return true;
};

if (!Object.keys) {
  Object.keys = function() {
    var keys, prop;
    keys = [];
    for (prop in this) {
      if (this.hasOwnProperty(prop)) {
        keys.push(prop);
      }
    }
    return keys;
  };
}

if (!Object.values) {
  Object.values = function() {
    var prop, values;
    values = [];
    for (prop in this) {
      if (this.hasOwnProperty(prop)) {
        values.push(this[prop]);
      }
    }
    return values;
  };
}
