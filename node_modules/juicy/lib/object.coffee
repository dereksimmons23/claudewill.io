Object.to_json = (obj) -> JSON.stringify obj

Object.to_xml = (rootElement, elements) ->
	build = (els, parentElement) ->
		parentElement ||= rootElement
		insertParent = not els
		els ||= elements
		els = if els.fields and els.errors and els.old then els.fields else els # detected Lychee model
		
		s = ''
		if not Array.isArray els
			s += "<#{ parentElement }>" if insertParent
			for el of els
				if els.hasOwnProperty el
					s += "<#{ el }>"
					if Array.isArray els[el]
						s += build(els[el], el.singularized)
					else if els[el] instanceof Object
						s += build(els[el])
					else
						s += "#{ els[el] }"
					s += "</#{ el }>"
			s += "</#{ parentElement }>" if insertParent
		
		if Array.isArray els
			for el in els
				if Array.isArray el
					s += "<#{ parentElement }>" if insertParent
					s += build(el)
					s += "</#{ parentElement }>" if insertParent
				else if el instanceof Object
					s += "<#{ parentElement }>" if insertParent
					s += build(el)
					s += "</#{ parentElement }>" if insertParent
				else
					s += "<#{ parentElement }>"
					s += el
					s += "</#{ parentElement }>"
				
		
		s
		
	xml = '<?xml version="1.0" encoding="utf-8"?>'
	xml += "<#{ rootElement.pluralized }>"
	xml += build()
	xml += "</#{ rootElement.pluralized }>"
	xml

Object.merge = (src, dest) ->
	for prop of dest
		src[prop] = dest[prop] if dest.hasOwnProperty(prop)
	
	src

Object.eql = (src, dest) ->
	return no if not src instanceof Object or not dest instanceof Object # no reason to continue
	
	eqlObject src, dest

eqlObject = (src, dest) ->
	return no if not src instanceof Object or not dest instanceof Object # no reason to continue
	length = 0 # length of this object
	
	for prop of src
		length++ if src.hasOwnProperty(prop)
	
	objLength = 0 # length of dest
	
	for prop of dest
		objLength++ if dest.hasOwnProperty(prop)
	
	return no if length != objLength # if lengths of object don't match, no need to continue
	
	for prop of src
		if src.hasOwnProperty(prop)
			if src[prop] instanceof Object
				return no if not Object.eql src[prop], dest[prop] # recursive eql()
			else
				return no if src[prop] != dest[prop]
	
	yes

if not Object.keys
	Object.keys = ->
		keys = []

		for prop of @
			keys.push(prop) if @hasOwnProperty(prop)

		keys

if not Object.values
	Object.values = ->
		values = []

		for prop of @
			values.push(@[prop]) if @hasOwnProperty(prop)

		values