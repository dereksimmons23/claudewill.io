// Generated by CoffeeScript 1.3.3
var expect;

if (typeof require !== "undefined" && require !== null) {
  expect = require('../node_modules/expect.js');
  require('../');
}

describe('Juicy', function() {
  describe('Object', function() {
    it('merge', function() {
      var obj;
      obj = {
        a: 1
      };
      obj = Object.merge(obj, {
        b: 2
      });
      return expect(obj.a).to.be(1) && expect(obj.b).to.be(2);
    });
    return it('eql', function() {
      var first, second, third;
      first = {
        a: 1,
        b: [2]
      };
      second = {
        a: 1,
        b: [2]
      };
      third = {
        a: 1,
        b: 2,
        c: 3
      };
      return expect(Object.eql(first, second)).to.be(true) && expect(Object.eql(second, third)).to.be(false);
    });
  });
  describe('Array', function() {
    it('collect', function() {
      var items;
      items = ['a', 'b'].collect(function(item) {
        return "" + item + "!";
      });
      return expect(items[0]).to.be('a!') && expect(items[1]).to.be('b!');
    });
    it('combination', function() {
      var items;
      items = ['a', 'b', 'c'].combination(0);
      expect(items.length).to.be(0);
      items = ['a', 'b', 'c'].combination(1);
      expect(items[0][0]).to.be('a') && expect(items[1][0]).to.be('b') && expect(items[2][0]).to.be('c');
      items = ['a', 'b', 'c'].combination(2);
      expect(items[0][0]).to.be('a') && expect(items[0][1]).to.be('b') && expect(items[1][0]).to.be('c');
      items = ['a', 'b', 'c'].combination(3);
      return expect(items[0][0]).to.be('a') && expect(items[0][1]).to.be('b') && expect(items[0][2]).to.be('c') && expect(items[1]).to.be(void 0);
    });
    it('compact', function() {
      var items;
      items = ['a', false, 'b', null].compacted;
      return expect(items[0]).to.be('a') && expect(items[1]).to.be(false) && expect(items[2]).to.be('b');
    });
    it('merge', function() {
      var items;
      items = ['a'].merge(['b']);
      return expect(items[0]).to.be('a') && expect(items[1]).to.be('b');
    });
    it('count', function() {
      var count;
      count = ['a', 'b', 'c', 'd'].count(function(item) {
        return item > 'a';
      });
      return expect(count).to.be(3);
    });
    it('remove', function() {
      var items;
      items = ['a', 'b', 'c', 'a'];
      items.remove('a');
      return expect(items[0]).to.be('b') && expect(items[1]).to.be('c');
    });
    it('removeAt', function() {
      var items;
      items = ['a', 'b', 'c'];
      items.removeAt(1);
      return expect(items[0]).to.be('a') && expect(items[1]).to.be('c');
    });
    it('removeIf', function() {
      var items;
      items = ['a', 'b', 'c'].removeIf(function(item) {
        return item > 'a';
      });
      return expect(items[0]).to.be('a') && expect(items.length).to.be(1);
    });
    it('drop', function() {
      var items;
      items = ['a', 'b', 'c'];
      items.drop(2);
      return expect(items[0]).to.be('c') && expect(items.length).to.be(1);
    });
    it('dropWhile', function() {
      var items;
      items = ['a', 'b', 'c', 'd'];
      items = items.dropWhile(function(item) {
        return item < 'd';
      });
      return expect(items[0]).to.be('d') && expect(items.length).to.be(1);
    });
    it('eachIndex', function() {
      var items;
      items = ['a', 'b', 'c'];
      return items.eachIndex(function(index) {
        return expect(!!items[index]);
      });
    });
    it('eql', function() {
      var first, second, third;
      first = ['a', ['b']];
      second = ['a', ['b']];
      third = ['a', ['b'], 'c'];
      return expect(first.eql(second)).to.be(true) && expect(first.eql(third)).to.be(false);
    });
    it('flatten', function() {
      var items;
      items = ['a', ['b'], [['c']]].flattened;
      return expect(items[0]).to.be('a') && expect(items[1]).to.be('b') && expect(items[2]).to.be('c');
    });
    it('take', function() {
      var items;
      items = ['a', 'b', 'c'].take(2);
      return expect(items[0]).to.be('a') && expect(items[1]).to.be('b') && expect(items.length).to.be(2);
    });
    it('takeWhile', function() {
      var items;
      items = ['a', 'b', 'c'].takeWhile(function(item) {
        return item < 'c';
      });
      return expect(items[0]).to.be('a') && expect(items[1]).to.be('b') && expect(items.length).to.be(2);
    });
    it('transpose', function() {
      var columns, rows, _ref;
      _ref = [['a', 'c'], ['b', 'd']].transposed, rows = _ref[0], columns = _ref[1];
      return expect(rows[0]).to.be('a') && expect(columns[0]).to.be('c') && expect(rows[1]).to.be('b') && expect(columns[1]).to.be('d');
    });
    it('get first', function() {
      return expect(['a', 'b'].first).to.be('a');
    });
    it('set first', function() {
      var items;
      items = ['a', 'b'];
      items.first = 'c';
      return expect(items.first).to.be('c');
    });
    it('get last', function() {
      return expect(['a', 'b'].last).to.be('b');
    });
    return it('set last', function() {
      var items;
      items = ['a', 'b'];
      items.last = 'c';
      return expect(items.last).to.be('c');
    });
  });
  describe('String', function() {
    it('downcase', function() {
      return expect('GO'.downcase).to.be('go');
    });
    return it('upcase', function() {
      return expect('go'.upcase).to.be('GO');
    });
  });
  return describe('Number', function() {});
});
